<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!--<bean id="connectionMaker" class="springbook.user.dao.DConnectionMaker"/>-->

    <tx:annotation-driven/> <!-- @Transactional 이 붙은 타입의 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록 -->

    <context:annotation-config/>  <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기 등록 @PostConstruct 사용가능 -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/tobi"/>
        <property name="username" value="tobitest"/>
        <property name="password" value="tobitest"/>
    </bean>

    <bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/> <!-- ref="connectionMaker" -->
        <property name="sqlService" ref="sqlService"/>
    </bean>

    <bean id="sqlService" class="springbook.user.sqlservice.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller"/>
        <property name="sqlRegistry" ref="sqlRegistry"/>
        <!-- 파일 시스템의경우 value="file:/opt/resources/sqlmap.xml"-->
        <!-- HTTP 프로토콜 접근 가능 웹리소스의 경우 value="http://www.epril.copm/resources/sqlmap.xml -->
    </bean>

    <!-- HSQL 내장형 DB 설정 -->
    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
        <jdbc:script location="classpath:springbook/user/sqlservice/updatable/sqlRegistrySchema.sql"/>
    </jdbc:embedded-database>

    <bean id="sqlRegistry" class="springbook.user.sqlservice.updatable.EmbeddedDbSqlRegistry">
        <property name="dataSource" ref="embeddedDatabase"/>
    </bean>

<!--    <bean id="sqlAdminService" class="springbook.user.sqlservice.SqlAdminService">
        <property name="updatableSqlRegistry" ref="sqlRegistry"/>
    </bean>-->

    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="springbook.user.sqlservice.jaxb"/>
    </bean>

    <bean id="userService" class="springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="mailSender" class="springbook.user.service.DummyMailSender"/>

    <bean id="message" class="springbook.learningtest.jdk.MessageFactoryBean">
        <property name="text" value="Factory Bean"/>
    </bean>

    <!-- 자동 프록시 생성기 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <!-- 테스트용 UserService -->
    <bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserService" parent="userService" />

</beans>